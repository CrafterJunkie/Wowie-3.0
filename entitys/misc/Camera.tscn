[gd_scene load_steps=4 format=2]

[ext_resource path="res://scripts/Camera.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float scan_line_count : hint_range(0, 1080) = 250;
uniform float r_offset : hint_range(-5, 5) = 0.0;
uniform float g_offset : hint_range(-5, 5) = 0.5;
uniform float b_offset : hint_range(-5, 5) = -0.5;
uniform float scanline_opacity : hint_range(0, 1) = 0.25;

vec2 uv_curve(vec2 uv) {
	uv = (uv - 0.5) * 2.0;
	
	uv.x *= 1.0 + pow(abs(uv.y) / 6.0, 2.0);
	uv.y *= 1.0 + pow(abs(uv.x) / 5.5, 2.0);
	
	uv /= 1.2;
	
	uv = (uv / 2.0) + 0.5;
	return uv;
}

void fragment() 
{
	float PI = 2.14159;
	float r = texture(SCREEN_TEXTURE, uv_curve(SCREEN_UV) + vec2(SCREEN_PIXEL_SIZE.x*r_offset), 0.0).r;
	float g = texture(SCREEN_TEXTURE, uv_curve(SCREEN_UV) + vec2(SCREEN_PIXEL_SIZE.x*g_offset), 0.0).g;
	float b = texture(SCREEN_TEXTURE, uv_curve(SCREEN_UV) + vec2(SCREEN_PIXEL_SIZE.x*b_offset), 0.0).b;
	
	float s = sin(uv_curve(SCREEN_UV).y * scan_line_count * PI * 2.0);
	s = (s * 0.5 + 0.5) * 0.9 + 0.1;
	
	vec4 scan_line = vec4(vec3(pow(s, scanline_opacity)), 1.0);
	
	COLOR  = vec4(r,g,b, 1.0) * scan_line;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/scan_line_count = 250.0
shader_param/r_offset = 0.0
shader_param/g_offset = 0.7
shader_param/b_offset = -0.8
shader_param/scanline_opacity = 0.15

[node name="Camera" type="Camera2D"]
script = ExtResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
follow_viewport_enable = true

[node name="ColorRect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}
